#!/usr/bin/env bash
{

## use-bknix.demo: This is the flavor of "use-bknix" designed for the homerdo-demo environment.
##
## Examples:
##   eval $(use-bknix min)
##   eval $(use-bknix max)
##   eval $(use-bknix dfl)
##
## Works with buildkit data in either of:
##    {$HOME}/bknix-{$NAME}
##    {$HOME}/bknix

###########################################################
## Constants

TXT_RESET='\[\033[0m\]'
TXT_BLACK='\[\033[0;30m\]'
TXT_RED='\[\033[0;31m\]'
TXT_GREEN='\[\033[0;32m\]'
TXT_YELLOW='\033[0;33m\]'
TXT_BLUE='\[\033[0;34m\]'
TXT_PURPLE='\[\033[0;35m\]'
TXT_CYAN='\[\033[0;36m\]'
TXT_WHITE='\[\033[0;37m\]'

###########################################################
## Input parsing

function use_worker_n() {
 echo >&2 "WARNING: Ignore --worker-n"
}

MODE=env
USE_LOCO_FILE=".loco/demo.yml"
PROFILE=
USE_CD=

if [ -z "$OWNER" ]; then
  OWNER=$USER
fi

while [ -n "$1" ]; do
  OPT="$1"
  shift

  while [[ "$OPT" != "" ]]; do
    case "$OPT" in
      old|min|dfl|max|edge) PROFILE="$OPT" ; OPT="" ;;
      --shell) MODE=shell     ; OPT="" ;;
      --env) MODE=env         ; OPT="" ;;
      --run) MODE=run         ; OPT="" ;;
      --project-dir) USE_CD=1 ; OPT="" ;;
      -s*) MODE=shell         ; OPT="-${OPT:2}" ;;
      -e*) MODE=env           ; OPT="-${OPT:2}" ;;
      -r*) MODE=run           ; OPT="-${OPT:2}" ;;
      -c*) USE_CD=1           ; OPT="-${OPT:2}" ;;

      -N0*|-N1*|-N2*|-N3*|-N4*|-N5*|-N6*) use_worker_n "${OPT:2:1}" ; OPT="-${OPT:3}" ;;
      --worker-n) use_worker_n ; OPT="" ;;
      -N*) use_worker_n ; OPT="-${OPT:2}" ;;

      -) OPT="" ; ;;
      *) echo "Unrecognized option: $OPT" ; exit 1 ; ;;
    esac

  done

  if [ "$MODE" = "run" -a -n "$PROFILE" ]; then
    ## The rest of the args are RUN_CMD.
    break
  fi
done

#echo "PARSED: PROFILE=$PROFILE MODE=$MODE USE_LOCO_FILE=$USE_LOCO_FILE USE_CD=$USE_CD" > /dev/stderr
#exit 10

###########################################################
## Validation/help
if [ -z "$PROFILE" ]; then
  echo "The specified profile does not correspond to an actual profile"
  echo
  echo "usage: $0 <PROFILE> [-c|--project-dir] [-e|--env|-s|--shell|-r|--run] [RUN_CMD]"
  echo ""
  echo "options:"
  echo "  -e|--env           Display environment variables for the profile"
  echo "  -s|--shell         Open a subshell with the profile"
  echo "  -r|--run           Run a command in a subshell"
  echo "  -N|--worker-n      (Ignored)"
  echo "  -c|--project-dir   Change working directory to project-root"
  echo ""
  echo "example: Generate environment variables for \"dfl\" profile"
  echo "  $0 dfl"
  echo "example: Open subshell for \"min\" profile"
  echo "  $0 min -s"
  echo "example: Run a command in a subshell for \"min\" profile"
  echo "  $0 min -r civibuild"
  echo ""
  exit 1
fi

###########################################################
## Main

# PATH="$HOME/src/loco/bin:$PATH"
# export BKPROF="$PROFILE"

for CANDIDATE in "$HOME/bknix" "$HOME/bknix-$PROFILE" "$HOME/buildkit" "$HOME/buildkit-$PROFILE" ; do
  if [ -n "$USE_LOCO_FILE" -a -f "$CANDIDATE/$USE_LOCO_FILE" ]; then
    export BKIT="$CANDIDATE"
    ## Keep USE_LOCO_FILE
    break
  fi
done
if [ ! -d "$BKIT" ]; then
  echo "WARNING: Could not find suitable BKIT in \"$HOME\" (eg \"bknix\", \"buildkit\", \"bknix-min\")" >&2
fi
if [ -n "$USE_CD" ]; then
  cd "$BKIT"
fi

function createScript() {
  export BKPROF="$PROFILE"
  echo "export BKPROF=\"$PROFILE\" ;"

  CODE=`cd "$BKIT" && SHELL_VERBOSITY= nix-shell nix/bare.nix -A "$PROFILE" --run "loco env -c $USE_LOCO_FILE --export"`
  echo "$CODE"
  eval "$CODE"
  echo "export PS1=\"[${TXT_CYAN}bknix-$PROFILE${TXT_RESET}:${TXT_GREEN}\w${TXT_RESET}] \" ;"

  ( cd "$BKIT" && BKPROF="$PROFILE" nix-shell nix/bare.nix -A "$PROFILE" --run 'bknix-profile env' )
  if [ -f "$BKIT/nix/etc/bashrc.local" ]; then
    echo "source \"$BKIT/nix/etc/bashrc.local\""
  fi
  echo
}

## Note: "mktemp" in BSD and GNU work differently, but this formulation seems close enough to be portable.
TMPFILE=$(mktemp -t .use-bknix.XXXXXXXX)
function cleanup_bashrc() {
  rm -f "$TMPFILE"
}
trap cleanup_bashrc EXIT
createScript > "$TMPFILE"

case "$MODE" in
  env)
    cat "$TMPFILE"
    ;;
  shell)
    ## Bash v4(?) would support '--rcfile <( ...some command ... )'; but for
    ## backward compat, we explicitly make a temp file.
    bash --rcfile "$TMPFILE" -i
    ;;
  run)
    source "$TMPFILE"
    "$@"
    ;;
esac

exit 0
}
