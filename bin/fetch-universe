#!/usr/bin/env php
<?php

########################################################################################
## General utilities

/**
 * @param string $cwd Current working directory
 * @param string $cmd Command to execute
 * @return int
 *   Exit code from command
 */
function run($cwd, $cmd) {
  $old = getcwd();
  fwrite(STDERR, "\nRUN[[$cwd]]: $cmd\n");
  chdir($cwd);
  passthru($cmd, $status);
  chdir($old);
  return $status;
}

/**
 * Print an error note.
 */
function errprintf() {
  $str = call_user_func_array('sprintf', func_get_args());
  fwrite(STDERR, $str);
}

function errdump(...$args) {
  fwrite(STDERR, var_dump($args, 1));
}

########################################################################################
## Feeds

/**
 * Get the list of published extensions from civicrm.org.
 *
 * @return array
 */
function feed_extdir() {
  $extdirUrl = 'https://civicrm.org/extdir/git-urls';
  errprintf("Fetch URL (%s)\n", $extdirUrl);
  $json = json_decode(file_get_contents($extdirUrl), 1);
  return feed_normalize($json, ['type' => 'ext']);
}

/**
 * Get the list of semi-published extensions from lab.civicrm.org.
 *
 * @return array
 */
function feed_labdir() {
  $labdir = [];
  $page = 1;
  $pageSize = 100;
  do {
    $laburl = "https://lab.civicrm.org/api/v4/groups/58/projects?page={$page}&per_page={$pageSize}";
    errprintf("Fetch URL (%s)\n", $laburl);

    $validProjectsInPage = 0;
    $projects = json_decode(file_get_contents($laburl), 1);
    foreach ($projects as $project) {
      // Have we gotten generally sensible data?
      if (empty($project['path_with_namespace'])) {
        continue;
      }

      $validProjectsInPage++;

      // Does this look cloneable?
      if (!$project['empty_repo'] && $project['repository_access_level'] !== 'disabled') {
        $name = basename($project['path_with_namespace']);
        $labdir[$name] = [
          'git_url' => $project['http_url_to_repo'],
        ];
      }
    }

    $page++;
  } while ($validProjectsInPage > 0);

  return feed_normalize($labdir, ['type' => 'ext']);
}

/**
 * Get a static list of projects from CiviCRM's Github
 * @return array
 */
function feed_static() {
  $core = array(
    'civicrm-core' => array(
      'git_url' => 'https://github.com/civicrm/civicrm-core',
      'type' => 'core',
    ),
    'civicrm-backdrop-1.x' => array(
      'git_url' => 'https://github.com/civicrm/civicrm-backdrop',
      'git_branch' => '1.x-master',
      'type' => 'core',
    ),
    'civicrm-buildkit' => array(
      'git_url' => 'https://github.com/civicrm/civicrm-buildkit',
      'type' => 'tools',
    ),
    'civicrm-drupal-6.x' => array(
      'git_url' => 'https://github.com/civicrm/civicrm-drupal',
      'git_branch' => '6.x-master',
      'type' => 'core',
    ),
    'civicrm-drupal-7.x' => array(
      'git_url' => 'https://github.com/civicrm/civicrm-drupal',
      'git_branch' => '7.x-master',
      'type' => 'core',
    ),
    'civicrm-drupal-8.x' => array(
      'git_url' => 'https://github.com/civicrm/civicrm-drupal-8',
      'type' => 'core',
    ),
    'civicrm-joomla' => array(
      'git_url' => 'https://github.com/civicrm/civicrm-joomla',
      'type' => 'core',
    ),
    'civicrm-packages' => array(
      'git_url' => 'https://github.com/civicrm/civicrm-packages',
      'type' => 'core',
    ),
    'civicrm-setup' => array(
      'git_url' => 'https://github.com/civicrm/civicrm-setup',
      'type' => 'lib',
    ),
    'civicrm-wordpress' => array(
      'git_url' => 'https://github.com/civicrm/civicrm-wordpress',
      'type' => 'core',
    ),
    'civihr' => array(
      'git_url' => 'https://github.com/civicrm/civihr',
      'git_branch' => 'staging',
      'type' => 'ext',
    ),
    'com.webaccessglobal.module.civimobile' => array(
      'git_url' => 'https://github.com/webaccess/com.webaccessglobal.module.civimobile',
      'type' => 'ext',
    ),
    'civix' => array(
      'git_url' => 'https://github.com/totten/civix',
      'type' => 'tools',
    ),
    'coworker' => array(
      'git_url' => 'https://lab.civicrm.org/dev/coworker',
      'type' => 'tools',
    ),
    'cf-civicrm' => array(
      'git_url' => 'https://github.com/mecachisenros/cf-civicrm',
      'type' => 'wp-plugin',
    ),
    'civicrm_entity' => array(
      'git_url' => 'https://git.drupalcode.org/project/civicrm_entity',
      'type' => 'drupal-module',
    ),
    'webform_civicrm' => array(
      'git_url' => 'https://github.com/colemanw/webform_civicrm',
      'type' => 'drupal-module',
    ),
  );

  // These repos all have basic names and use default branch.
  $subRepos = array(
    'l10n' => 'core',
    'civicrm-upgrade-test' => 'core',

    'civicrm-dev-docs' => 'docs',
    'civicrm-infra' => 'docs',
    'civicrm-sysadmin-guide' => 'docs',
    'civicrm-user-guide' => 'docs',
    'release-management' => 'docs',

    'apachesolr_civiAttachments' => 'drupal-module',

    'civicrm-l10n-extensions' => 'ext',
    'org.civicrm.doctorwhen' => 'ext',
    'org.civicrm.module.cividiscount' => 'ext',
    'org.civicrm.shoreditch' => 'ext',
    'org.civicrm.sms.twilio' => 'ext',
    'org.civicrm.styleguide' => 'ext',
    'org.civicrm.volunteer ' => 'ext',

    'civicrm-cxn-rpc' => 'lib',
    'composer-compile-lib ' => 'lib',
    'composer-compile-plugin ' => 'lib',
    'composer-downloads-plugin ' => 'lib',
    'jquery' => 'lib',
    'jqueryui' => 'lib',
    'mosaico' => 'lib',
    'zetacomponents-mail' => 'lib',

    'civicon' => 'misc',
    'civicrm-ac' => 'misc',
    'civicrm-botdylan' => 'misc',
    'civicrm-community-messages' => 'misc',
    'civicrm-dist-manager' => 'misc',
    'civicrm-docs' => 'misc',
    'civicrm-extdir-example' => 'misc',
    'civicrm-org-platform' => 'misc',
    'civicrm-pingback' => 'misc',
    'civicrm-statistics'=> 'misc',
    'cxnapp' => 'misc',
    'pr-report' => 'misc',
    'probot-civicrm' => 'misc',

    'civistrings' => 'tools',
    'coder' => 'tools',
    'cv' => 'tools',
    'cv-nodejs' => 'tools',
    'phpunit-xml-cleanup ' => 'tools',

    'civicrm-demo-wp' => 'wp-plugin',
  );
  foreach ($subRepos as $subRepo => $type) {
    $core[$subRepo] = array(
      'git_url' => 'https://github.com/civicrm/' . $subRepo,
      'type' => $type,
    );
  }

  return feed_normalize($core);
}

/**
 * Adjust common quirks/omissions.
 *
 * @param array $feed
 * @return array
 */
function feed_normalize($feed, $defaults = []) {
  $new = [];
  foreach ($feed as $key => $repo) {
    $repo['key'] = $key;

    if (preg_match('/^git@(lab\.civicrm\.org|github\.com):(.*)/', $repo['git_url'], $m)) {
      $userRepo = preg_replace('/\.git$/', '', $m[2]);
      $repo['git_url'] = sprintf('https://%s/%s.git', $m[1], $userRepo);
    }
    elseif (preg_match(';^https?://(lab\.civicrm\.org|github\.com)/(.*);', $repo['git_url'], $m)) {
      $userRepo = preg_replace('/\.git$/', '', $m[2]);
      $repo['git_url'] = sprintf('https://%s/%s.git', $m[1], $userRepo);
    }

    $new[$key] = array_merge($defaults, $repo);
  }
  ksort($new);
  return $new;
}

/**
 * Combine a list of feeds.
 *
 * Duplicate keys and duplicate URLs are consolidated, with priority
 * given to the first instance.
 *
 * @param array $feeds
 * @return array
 */
function feed_merge($feeds) {
  $all = [];
  $srcIds = []; // Flag git URLs/branches that have been visited already.
  foreach ($feeds as $feed) {
    foreach ($feed as $key => $repo) {
      $srcId = $repo['git_url'] . '#' . ($repo['git_branch'] ?? 'DEFAULT');
      if (isset($all[$key])) {
        errprintf("skip duplicate key (%s) from (%s)\n", $key, $srcId);
        continue;
      }
      if (isset($srcIds[$srcId])) {
        errprintf("skip duplicate src (%s) from (%s)\n", $key, $srcId);
        continue;
      }

      $all[$key] = $repo;
      $srcIds[$srcId] = 1;
    }
  }

  return feed_normalize($all);
}

########################################################################################
## Parse inputs
if (empty($argv[1])) {
  errprintf("Missing base directory\n");
  errprintf("usage: fetch-universe <base-dir>\n");
  exit(1);
}

$basedir = realpath($argv[1]);

if (!file_exists($basedir) || !is_dir($basedir)) {
  errprintf("Missing base directory\n");
  errprintf("usage: fetch-universe <base-dir>\n");
  exit(1);
}

########################################################################################
## Main data loading

$statuses = array(); // array(string $key => int $code)
$deprecated = array('civicrm-drupal', 'civicrm-org-site', 'api4', 'civicrm-setup');

$repos = feed_merge([feed_extdir(), feed_static(), feed_labdir()]);

foreach ($repos as $key => $ext) {
  $dir = "$basedir/" . $ext['type'] . "/$key";
  $oldDir = "$basedir/$key";

  if (!is_dir(dirname($dir))) {
    mkdir(dirname($dir));
  }

  if (is_dir($oldDir) && !is_dir($dir)) {
    errprintf("Move %s => %s\n", $oldDir, $dir);
    rename($oldDir, $dir);
  }

  if (empty($ext['git_url'])) {
    errprintf("$key does not have git_url\n");
    $statuses[$key] = 1;
  }
  elseif (file_exists($dir)) {
    run($dir, sprintf("git remote set-url origin %s", escapeshellarg($ext['git_url'])));
    $statuses[$key] = run($dir, "git pull");
  }
  else {
    $branchExpr = empty($ext['git_branch']) ? '' : ('-b ' . escapeshellarg($ext['git_branch']));
    $statuses[$key] = run($basedir, sprintf("git clone %s %s %s", escapeshellarg($ext['git_url']), escapeshellarg($dir), $branchExpr));
  }

  if (file_exists("$dir/composer.json") && $statuses[$key] == 0) {
    $statuses[$key] = run($dir, "composer install --no-scripts");
  }
}

$msgs = array();
foreach ($deprecated as $key) {
  $dir = "$basedir/$key";
  if (file_exists($dir)) {
    $msgs[] = "The folder \"$key\" is deprecated. Consider removing it";
  }
}

########################################################################################
$ok = array_keys(array_filter($statuses, function($val){
  return ($val == 0);
}));
$err = array_keys(array_filter($statuses, function($val){
  return ($val != 0);
}));

print_r(array(
  'ok' => $ok,
  'err' => $err,
  'msgs' => $msgs,
));
exit(array_sum($statuses));
