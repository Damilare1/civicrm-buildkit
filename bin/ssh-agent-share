#!/usr/bin/env bash
{ # https://stackoverflow.com/a/21100710
  set -e

  SHARED_DIR="/tmp" ## FIXME: macOS
  upstream_sock="$SSH_AUTH_SOCK"
  downstream_dir="$SHARED_DIR/fwd-$USER.$RANDOM$RANDOM"
  downstream_sock="$downstream_dir/fwd-$RANDOM$RANDOM"

  ## usage: forward <allow-user>
  ## ex: SSH_AUTH_SOCK=$(forward otheruser)
  function forward() {
    if [ -z "$SSH_AUTH_SOCK" -o ! -w "$SSH_AUTH_SOCK" ]; then
      fatal "SSH_AUTH_SOCK is undefined or not writeable"
    fi

    downstream_user="$1"
    if !( id -u "$downstream_user" >/dev/null 2>&1 ) ; then
      fatal "Invalid downstream user \"$downstream_user\""
    fi

    trap cleanup EXIT
    mkdir "$downstream_dir"
    chmod 711 "$downstream_dir"
    echo "$downstream_sock"

    while [[ -e "$upstream_sock" ]]; do
      socat "UNIX-CONNECT:$upstream_sock" "UNIX-LISTEN:$downstream_sock" &
      pid="$!"
      grant_access "$downstream_user" "$downstream_sock"
      wait "$pid"
    done
  }

  function is_user() {
    set +e
    id -u "$1" 2&>1 > /dev/null
    local res=$?
    set -e
    return $res
  }

  function cleanup() {
    if [ -e "$downstream_sock" ]; then rm "$downstream_sock" ; fi
    if [ -d "$downstream_dir" ]; then rmdir "$downstream_dir" ; fi
  }

  ## usage "grant_access user file"
  function grant_access() {
    local uname=$(uname)
    if which setfacl >> /dev/null ; then
      setfacl -m "u:$1:rwx" -m "o::---" "$2"
    elif [[ "$uname" == "Darwin" ]]; then
      /bin/chmod +a "$1 allow delete,write,append,file_inherit" "$2"
    else
      fatal "WARNING: Could not detect secure way to set file permissions"
    fi
  }

  function usage() {
    local prog="$(basename "$0")"
    echo "about: Share the active SSH agent with another user"
    echo "usage: $prog <other-user>"
  }

  function fatal() {
    echo >&2 "fatal: $@"
    echo >&2
    usage >&2
    exit 1
  }

  forward "$@"
  exit
}
